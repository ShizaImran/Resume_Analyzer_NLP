import streamlit as st
import pandas as pd
import re
import joblib
import nltk
import cohere  # Add the cohere library
import pdfplumber
from nltk.corpus import stopwords
nltk.download('stopwords')

# Set page config
st.set_page_config(page_title='Resume Analyzer', page_icon="üë®‚Äçüíª")

# PDF READER FUNC
def read_pdf_with_pdfplumber(file):
    with pdfplumber.open(file) as pdf:
        page = pdf.pages[0]
        return page.extract_text()

# COHERE API FUNC
def cohere_summarize(text):
    co = cohere.Client('YWAwMtDwvsoLtAsYCG53fzYYreT9DscnrXm6RLgY')  
    response = co.generate(
        model='command-xlarge-nightly', 
        prompt=f"Summarize the following resume:\n\n{text}\n\nSummary:",
        max_tokens=100,
        temperature=0.3,
        stop_sequences=["\n"]
    )
    return response.generations[0].text.strip()

def extract_fields(text):
    name = extract_name(text)
    email = extract_email(text)
    contact = extract_contact(text)
    return name, email, contact

def extract_name(text):
    lines = text.split('\n')
    for line in lines:
        if re.match(r'^[A-Z][a-z]*\s[A-Z][a-z]*$', line):
            return line
    return "Name not found"

def extract_email(text):
    email = re.search(r'[\w\.-]+@[\w\.-]+', text)
    return email.group(0) if email else "Email not found"

def extract_contact(text):
    contact = re.search(r'\b\d{10}\b', text)
    if not contact:
        contact = re.search(r'\(\d{3}\)\s*\d{3}-\d{4}', text)
    return contact.group(0) if contact else "Contact not found"

def gen_test_data_for_pred(text):
    snow = nltk.stem.SnowballStemmer('english')
    corpus_test = []
    review = re.sub('[^a-zA-Z]', ' ', text)
    review = review.lower()
    review = review.split()
    review = [snow.stem(word) for word in review if not word in stopwords.words('english')]
    review = ' '.join(review)
    corpus_test.append(review)

    tf_idf = joblib.load('tfidf_vectorizer.pkl')
    test_data = tf_idf.transform(corpus_test)
    return test_data

def prediction(text):
    clf_model = joblib.load('rf_score_model.pkl')
    result = clf_model.predict(gen_test_data_for_pred(text))
    return result

def main():
    page_bg_img = '''
    <style>
    body {
    background: linear-gradient(0deg, rgba(34,193,195,1) 0%, rgba(253,45,249,1) 100%);
    background-repeat:no-repeat;
    background-size: 1900px 800px;
    }
    </style>
    '''
    st.markdown(page_bg_img, unsafe_allow_html=True)

    st.markdown(
        """
    <style>
    .sidebar .sidebar-content {
        background: #ffffff;
        color: white;
    }
    </style>
    """,
        unsafe_allow_html=True,
    )

    nav_bar_img_html = """<img src='https://i.ibb.co/jV1BRxN/Pics-Art-Crop.png' width="300" height="100">"""
    st.sidebar.markdown(nav_bar_img_html, unsafe_allow_html=True)

    st.sidebar.markdown("""<br>""", unsafe_allow_html=True)

    st.sidebar.markdown("""<h2 style="color:black;">Navigation Bar:</h2>""", unsafe_allow_html=True)

    st.markdown("""<br><br><br>""", unsafe_allow_html=True)

    menu = ["Aboutüßæ", "Resume Score Generatorüìä", "Resume Summarizerüìã"]
    choice = st.sidebar.radio("", menu)

    if choice == "Aboutüßæ":
        nav_bar_img_html = """<img src='https://i.ibb.co/jV1BRxN/Pics-Art-Crop.png' width="690" height="160">"""
        st.markdown(nav_bar_img_html, unsafe_allow_html=True)
        about_section = """
            This project is called **Resume Analyzer**. Currently, it has only two features:
                
            ** 1. Resume Score Generator **
            <br>
            ** 2. Resume Summarizer **

            ### 1. Resume Score Generator: 
            It's a Machine Learning based model that is getting executed whenever you are clicking the Process button. It gives you a score, 
            which is generated by the model. This score might be helpful for recruiters or an HR person to shortlist a candidate for an interview. 
            Except that a candidate also can use it to check his/her score and according to that they can make changes to their resume. (The ML 
            model which is been developed is not so much accurate, because it is trained on randomly generated score data.)

            ### 2. Resume Summarizer:  
            It's a Custom NER(Named Entity Recognition) model which helps to summarize the resume. This is also important, because when the number 
            of applications increases, it gets difficult for higher-ups (recruiters) to look through each and every resume and analyze it. So, this 
            summarizer helps to see the skills and projects of that candidate at a glance.

        """
        st.markdown(about_section, unsafe_allow_html=True)

    elif choice == "Resume Score Generatorüìä":
        web_page_img_html = """<img src='https://i.ibb.co/jV1BRxN/Pics-Art-Crop.png' width="690" height="160">"""
        st.markdown(web_page_img_html, unsafe_allow_html=True)
        html_title = """<h2 style="color:black;text-align:center;">Upload a resume to get resume score</h2>"""
        st.markdown(html_title, unsafe_allow_html=True)

        docx_file = st.file_uploader("", type=['pdf'])
        button_clicked = st.button("Process")
        if button_clicked:
            if docx_file is not None:
                file_details = {"Filename": docx_file.name, "FileType": docx_file.type, "FileSize": docx_file.size}
                if docx_file.type == "application/pdf":
                    txt = read_pdf_with_pdfplumber(docx_file)
                    result = prediction(txt)
                    int_result = int(result) + 1
                    st.title("Your Score is {}".format(int_result))
                    if int_result >= 8:
                        st.markdown("""## Wow! He has good skills üí™""")
                        st.balloons()
                    elif 6 <= int_result < 8:
                        st.markdown("""## Moderate Skills üôÇ""")
                    else:
                        st.markdown("""## Poor One ü•¥""")

    else:
        web_page_img_html = """<img src='https://i.ibb.co/jV1BRxN/Pics-Art-Crop.png' width="690" height="160">"""
        st.markdown(web_page_img_html, unsafe_allow_html=True)
        html_title = """<h2 style="color:black;text-align:center;">Summarize the Resume</h2>"""
        st.markdown(html_title, unsafe_allow_html=True)

        docx_file = st.file_uploader("", type=['pdf'])
        if st.button("Process"):
            if docx_file is not None:
                file_details = {"Filename": docx_file.name, "FileType": docx_file.type, "FileSize": docx_file.size}
                if docx_file.type == "application/pdf":
                    txt = read_pdf_with_pdfplumber(docx_file)
                    summary = cohere_summarize(txt)
                    name, email, contact = extract_fields(txt)
                    st.markdown(f"<h2 style='color:black;'>Summary of the Resume:</h2>", unsafe_allow_html=True)
                    st.markdown(f"<h3 style='color:black;'>Name: {name}</h3>", unsafe_allow_html=True)
                    st.markdown(f"<h3 style='color:black;'>Email: {email}</h3>", unsafe_allow_html=True)
                    st.markdown(f"<h3 style='color:black;'>Contact: {contact}</h3>", unsafe_allow_html=True)
                    st.markdown(f"<h3 style='color:black;'>Summary:</h3><p style='color:black;'>{summary}</p>", unsafe_allow_html=True)
                    st.balloons()

if __name__ == '__main__':
    main()
